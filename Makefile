##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.5.2] date: [Tue Oct 22 09:39:01 MSK 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = firmware


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources

C_SOURCES =  \
RTOS/FreeRTOS/Source/croutine.c \
RTOS/FreeRTOS/Source/event_groups.c \
RTOS/FreeRTOS/Source/list.c \
RTOS/FreeRTOS/Source/queue.c \
RTOS/FreeRTOS/Source/stream_buffer.c \
RTOS/FreeRTOS/Source/tasks.c \
RTOS/FreeRTOS/Source/timers.c \
RTOS/FreeRTOS/Source/os_routines.c \
RTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \


CPP_SOURCES = \
Startup/vectors_stm32f446xx.cpp \
main.cpp \
Drivers/xprintf/xprintf.cpp \


# C includes
C_INCLUDES =  \
-IRTOS/FreeRTOS/Source/include \
-IRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F \
-IRTOS/Wrapper\
-IRTOS/Wrapper/FreeRTOS\
-I./ \
-IStartup/ \
-IAbstractHardware/ \
-IAbstractHardware/Registers/ \
-IAbstractHardware/Registers/STM32F446/ \
-IAbstractHardware/Atomic \
-IAbstractHardware/Pin/ \
-IAbstractHardware/EXTI/ \
-IAbstractHardware/NVIC/ \
-IAbstractHardware/UART/ \
-IAbstractHardware/RCC/ \
-IAbstractHardware/DMA/ \
-IAbstractHardware/I2c/ \
-IDrivers/swo/ \
-IDrivers/xprintf/ \
-IDrivers/ssd1306/ \
-IDrivers/buttons/ \



# C defines
C_DEFS =  \

# ASM sources
ASM_SOURCES =  \
Startup/startup_stm32f446xx.s

# AS includes
AS_INCLUDES =  \


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CXX = $(GCC_PATH)/$(PREFIX)g++
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CXX = $(PREFIX)g++
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -Wfatal-errors -fdata-sections -ffunction-sections 

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

CXXFLAGS += $(CFLAGS)
CXXFLAGS += -finline-functions -fabi-version=0 -fno-rtti \
			-fno-exceptions -fno-non-call-exceptions -fno-use-cxa-atexit \
			-feliminate-unused-debug-types -fno-threadsafe-statics \
			-std=gnu++20

# C++ -- Warnings
# CXXFLAGS += -Weffc++
CXXFLAGS += -Wfloat-equal
CXXFLAGS += -Wsign-promo
CXXFLAGS += -Wzero-as-null-pointer-constant
CXXFLAGS += -Wmissing-declarations
CXXFLAGS += -Woverloaded-virtual
CXXFLAGS += -Wsuggest-final-types
CXXFLAGS += -Wsuggest-final-methods
CXXFLAGS += -Wsuggest-override
CXXFLAGS += -Wsuggest-attribute=pure
CXXFLAGS += -Wsuggest-attribute=const
CXXFLAGS += -Wsuggest-attribute=noreturn
CXXFLAGS += -Wsuggest-attribute=format
CXXFLAGS += -Wmissing-format-attribute
CXXFLAGS += -Wshadow
CXXFLAGS += -Wctor-dtor-privacy
CXXFLAGS += -Wstrict-null-sentinel

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = Startup/STM32F446RETx.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nosys.specs -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -Wl,--print-memory-usage

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of cpp program objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of C objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	@echo $<
	$(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@echo $<
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo $<
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@	

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***